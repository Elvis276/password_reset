<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f4f4f9;
        }
        .container {
            background: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }
        h2 {
            text-align: center;
            color: #1abc9c; /* Supabase-like green */
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input[type="password"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            width: 100%;
            padding: 10px;
            background-color: #1abc9c;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #148f77;
        }
        .message {
            text-align: center;
            color: red;
            margin-top: 10px;
        }
    </style>
</head>
<body>

<div class="container">
    <h2>Set New Password</h2>
    <form id="password-reset-form">
        
        <label for="password">New Password</label>
        <input type="password" id="password" required>
        
        <label for="confirm-password">Confirm Password</label>
        <input type="password" id="confirm-password" required>
        
        <button type="submit" id="submit-button">Reset Password</button>
        
        <p class="message" id="error-message"></p>
    </form>
</div>

<script>
    // -------------------------------------------------------------------------
    // IMPORTANT: You must include your Supabase client library here.
    // For a real application, you would load the Supabase JavaScript SDK
    // and initialize your 'supabase' client object.
    // e.g., <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    // -------------------------------------------------------------------------

    // ðŸš¨ Placeholder for your initialized Supabase client
    // Replace this with your actual client initialization!
    const supabase = {
        auth: {
            updateUser: async (attributes) => {
                // In a real app, this is where the API call happens.
                // Since the user is logged in via the recovery link, 
                // this will update their password.
                console.log("Attempting to update password to:", attributes.password);
                
                // Simulate a successful API response
                // Replace this with the actual Supabase call:
                // const { data, error } = await YOUR_SUPABASE_CLIENT.auth.updateUser(attributes);
                
                // For this example, we'll always return success.
                return { data: { user: { id: '123' } }, error: null };
            }
        }
    };
    
    const form = document.getElementById('password-reset-form');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirm-password');
    const errorMessage = document.getElementById('error-message');
    const submitButton = document.getElementById('submit-button');

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        errorMessage.textContent = '';
        
        const newPassword = passwordInput.value;
        const confirmPassword = confirmPasswordInput.value;

        if (newPassword !== confirmPassword) {
            errorMessage.textContent = 'Passwords do not match.';
            return;
        }
        
        if (newPassword.length < 6) { // Basic validation
             errorMessage.textContent = 'Password must be at least 6 characters.';
            return;
        }
        
        submitButton.disabled = true;
        submitButton.textContent = 'Resetting...';

        try {
            // ðŸ’¡ When a user clicks the recovery link, Supabase *automatically* // signs them in with a temporary session. We just need to call updateUser.
            const { error } = await supabase.auth.updateUser({ 
                password: newPassword 
            });

            if (error) {
                errorMessage.textContent = `Error: ${error.message}`;
            } else {
                // SUCCESS POP-UP
                alert('ðŸŽ‰ Password successfully reset! You can now log in with your new password.'); 
                
                // Optionally redirect to the login page after success
                // window.location.href = '/login'; 
            }
        } catch (err) {
            errorMessage.textContent = 'An unexpected error occurred.';
            console.error(err);
        } finally {
            submitButton.disabled = false;
            submitButton.textContent = 'Reset Password';
        }
    });

    // NOTE: In a real app, you would also use supabase.auth.onAuthStateChange 
    // to verify the 'PASSWORD_RECOVERY' event before showing the form.
</script>

</body>
</html>
